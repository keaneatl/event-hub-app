@page "/purchase/{EventID}"

@using EventHubApp.Components.Account
@using Microsoft.AspNetCore.Identity
@using EventHubApp.Data

@attribute [StreamRendering(true)]
@inject IEventsService EventsService
@inject ITicketsService TicketsService
@inject IEventTypesService EventTypesService
@inject IUserTicketsService UserTicketsService
@inject UserManager<ApplicationUser> UserManager
@inject IUsersService UsersService
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager Navigation

@attribute [Authorize]

<PageTitle>Purchase Tickets</PageTitle>
<br />
<br />
<h1 class="text-center">Purchase Tickets</h1>

@if (e == null)
{
    <span>Loading...</span>
}
else
{
    <AuthorizeView Context="ApplicationDbContext">
        <div class="container">
            <h2 class="text-center my-5">@e.Event1</h2>
            <div class="row justify-content-center mb-5">
                <div class="col-sm-12 col-md-8 col-lg-6">
                    <div class="card">
                        <img src="assets/img2.png" class="card-img-top" alt="Image">
                        <div class="card-body">
                            <p><strong>Event Type:</strong> @eventType.EventType1</p>
                            <p class="card-text"><strong>Event Location: </strong>@e.Location</p>
                            <p class="card-text"><strong>Event Description:</strong> @e.Description</p>
                            @* <p class="card-text"><strong>Event Price:</strong>₱@e.Price</p> *@
                            <p class="card-text"><strong>Event Start Date:</strong> @e.StartDate</p>
                            <p class="card-text"><strong>Event End Date:</strong> @e.EndDate</p>

                            <br />
                            <EditForm Model="UserTicket" OnSubmit="HandleSubmit" FormName="EditUserTickets">
                                <label for="ticket-type" class="label1"><strong>Ticket Type</strong></label>
                                <InputSelect @bind-Value="UserTicket.TicketId" id="ticket-type">
                                    @foreach (var ticket in eventTickets)
                                    {
                                        @if (ticket.Stock > 0)
                                        {
                                            <option value="@ticket.TicketId">@ticket.Ticket1 - ₱@ticket.Price</option>
                                        }
                                        else
                                        {
                                            <option disabled>@ticket.Ticket1 - ₱@ticket.Price</option>
                                        }
                                    }
                                </InputSelect>
                                <br />
                                <br />
                                <label class="label1" for="quantity"><strong>Ticket Quantity:</strong></label>
                                <InputNumber @bind-Value="UserTicket.Quantity" type="number" id="quantity" class="form-control" />

                                <label class="label1" for="paymentMethod"><strong>Payment Method:</strong></label>
                                <InputSelect @bind-Value="UserTicket.PaymentMethod" class="form-control" id="paymentMethod">
                                    <option value="GCash">GCash</option>
                                    <option value="Maya">Maya</option>
                                    <option value="Credit Card">Credit Card</option>
                                </InputSelect>

                                <button type="submit" class="btn btn-primary">Buy Tickets</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </AuthorizeView>
}

@code {
    [Parameter]
    public string EventID { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    List<Ticket> eventTickets = null;
    List<EventType> eventTypes = null;
    EventType eventType = null;
    Event e = null;

    private ApplicationUser user = default!;
    private string? username;
    private int userId = -1;


    protected override async Task OnInitializedAsync()
    {
        e = await EventsService.GetEvent(EventID);
        eventTickets = await TicketsService.GetEventTickets(EventID);
        eventTypes = await EventTypesService.GetAllEventTypes();
        eventType = eventTypes.Find(eventType => eventType.EventTypeId == e.EventTypeId);

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserIdAsync(user);

        var eventHubUser = await UsersService.FindUserByUsername(username);
        userId = eventHubUser.UserId;
    }

    [SupplyParameterFromForm]
    public UserTicket UserTicket { get; set; } = new UserTicket()
        {
            TicketId = -1,
            Quantity = 1,
            PaymentMethod = string.Empty,
        };

    async Task HandleSubmit()
    {
        UserTicket.PurchaseDate = DateTime.Now;
        UserTicket.UserId = userId;
        await UserTicketsService.PurchaseTicket(UserTicket);

        // TODO: Lead user to Purchased Tickets Page upon successful purchase & catch purchase failure 
        // Navigation.NavigateTo("/");
    }
}
